#This is the Josh version, designed for the full 14 button controller.
import time
import math
import plasma
import random
from plasma import plasma2040
from pimoroni_i2c import PimoroniI2C
from pimoroni import RGBLED, Analog
from breakout_ioexpander import BreakoutIOExpander
sense = Analog(plasma2040.CURRENT_SENSE, plasma2040.ADC_GAIN, plasma2040.SHUNT_RESISTOR)

offset = 1
numLamps = 12
lampSize = 72 # The power supplys are 6 amps. one lamp at full power consumes 8.04 amps.
numLeds = lampSize*numLamps
buttonpress = 0
bank = 0
effect = 4
bpm = 120
effectplaying= 4
count= 0 
framerate = 2 #2 is a good default
held = False

ls = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
le = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

for i in range(1,(numLamps+1)):
    ls[i]  = lampSize*(i-1)
    le[i]  = (lampSize*i)-1 
    print("lamp " + str(i) + "   start: " + str(ls[i]) + "   end: " + str(le[i]))

    
led_strip = plasma.WS2812(numLeds, 0, 0, plasma2040.DAT)
# Start updating the LED strip
led_strip.start()

led = RGBLED(plasma2040.LED_R, plasma2040.LED_G, plasma2040.LED_B)

# I2C config
PINS_PICO_EXPLORER = {"sda": 20, "scl": 21}
i2c = PimoroniI2C(**PINS_PICO_EXPLORER)
ioe = BreakoutIOExpander(i2c, address=0x18)
for i in range(14):
    ioe.set_mode(i+1, BreakoutIOExpander.PIN_IN_PU)


def nil():
    speed = 12#smaller is faster, 25 is a good default
    sinetable = [0,0,0, 0,0]
    wavelength = 5 #longer number is shorter wavelength. try 5
    thickness = 36
    wavepeak= 20

    for i in range(5):
        sine = math.sin((count+(i*wavelength))/speed) #goes between -1 and 1
        sine = ((sine+1)*wavepeak) #goes between 0 and 36
        sine = round(sine)
    #print(sine    table[0], sinetable[1], sinetable[2], sinetable[3], sinetable[4])

        for n in range(thickness):
            ledNo = ls[(i+1)*2-1]+sine+n
            if ledNo < le[(i+1)*2-1]:
                led_strip.set_rgb(ledNo, 255, 100, 70)
            
            ledNo = le[(i+1)*2]-sine-n
            if ledNo > ls[(i+1)*2]:
                led_strip.set_rgb(ledNo, 255, 100, 70)
            

        for n in range(1,6):
            
            ledNo = ls[(i+1)*2-1]+sine+thickness+n
            if ledNo <= le[(i+1)*2-1]:
                led_strip.set_rgb(ledNo, 0, 0, 0)
                
            ledNo = ls[(i+1)*2-1]+sine-n
            if ledNo >= ls[(i+1)*2-1]:
                led_strip.set_rgb(ledNo, 0, 0, 0)
            
            ledNo = le[(i+1)*2]-sine-thickness-n
            if ledNo >= ls[(i+1)*2]:
                led_strip.set_rgb(ledNo, 0, 0, 0)
                
            ledNo = le[(i+1)*2]-sine+n
            if ledNo >=ls[(i+1)*2]:
                led_strip.set_rgb(ledNo, 0, 0, 0)

def bluesine():
    fooo = nil
    for i in range(lampSize):
        sine = math.cos((count+i)) #goes between 0 and 1
        sine = round(abs(sine), 3)
        sine = (math.floor(sine*255))
        foo = i
        for i in range(numLamps):
            led_strip.set_rgb(foo + (i*lampSize), 0, 0, sine)
    
def stop():
    #print("josh you ran stop. This is fine")
    for i in range(numLeds):
        led_strip.set_rgb(i, 0, 0, 0) 

                    
def whitestrobe():
    brightness = 255
    changer = count%4
    #print(changer)
    if changer%2 == 0:
        
        for i in range(0,numLeds):
            led_strip.set_rgb(i, 0, 0, 0)

    elif changer == 1:
        for i in range(0,numLeds,2):
            led_strip.set_rgb(i, brightness, brightness, brightness)
            
    elif changer == 3:
        for i in range(1,numLeds,2):
            led_strip.set_rgb(i, brightness, brightness, brightness)

def horizontalrainbow():
    global offset
    #print(count)
    s = 1
    v = min((count/50),1)
    offset += 30 / 2000.0
    for i in range(1,6):
        hue = (float((i)) / 1000)
        for i in range(ls[(i*2)-1],le[(i*2)]):
            led_strip.set_hsv(i, hue + offset, s, v)

def box():
    divider = 50
    if (count%divider) == divider*0: #box
        #print("boom" + str((count/15)%2) + " bpm: " + str(bpm))
        for i in range(le[2]):
            led_strip.set_rgb(i, 0, 0, 255)
        for i in range(ls[9],le[10]):
            led_strip.set_rgb(i, 0, 0, 255)
            
        for i in range(ls[3]-7,(ls[3]+7)):
            led_strip.set_rgb(i, 0, 0, 255)
            foo = i 
            for i in range(7):
                led_strip.set_rgb((foo+(lampSize*i)), 0, 0, 255)
       
    if (count%divider) == divider*0.2: 
       # print("clap" + str((count/15)%2) + " bpm: " + str(bpm))
        for i in range(numLeds):
            led_strip.set_rgb(i, 0, 0, 0)

    if (count%divider) == divider*0.5: #cross
       # print("boom" + str((count/15)%2) + " bpm: " + str(bpm))
        for i in range(ls[5],le[6]):
            led_strip.set_rgb(i, 0, 0, 255)

    if (count%divider) == divider*0.7: 
       # print("clap" + str((count/15)%2) + " bpm: " + str(bpm))
        for i in range(numLeds):
            led_strip.set_rgb(i, 0, 0, 0)
            
            
def cross():
    divider = 50
    if (count%divider) == divider*0: #box
        #print("boom" + str((count/15)%2) + " bpm: " + str(bpm))
        for i in range(le[2]):
            led_strip.set_rgb(i, 0, 0, 255)
        for i in range(ls[9],le[10]):
            led_strip.set_rgb(i, 0, 0, 255)
            
        for i in range(ls[3]-7,(ls[3]+7)):
            led_strip.set_rgb(i, 0, 0, 255)
            foo = i 
            for i in range(7):
                led_strip.set_rgb((foo+(lampSize*i)), 0, 0, 255)
       
    if (count%divider) == divider*0.2: 
       # print("clap" + str((count/15)%2) + " bpm: " + str(bpm))
        for i in range(numLeds):
            led_strip.set_rgb(i, 0, 0, 0)

    if (count%divider) == divider*0.5: #cross
       # print("boom" + str((count/15)%2) + " bpm: " + str(bpm))
        for i in range(ls[5],le[6]):
            led_strip.set_rgb(i, 0, 0, 255)

    if (count%divider) == divider*0.7: 
       # print("clap" + str((count/15)%2) + " bpm: " + str(bpm))
        for i in range(numLeds):
            led_strip.set_rgb(i, 0, 0, 0)
            
def x():
    divider = 50
    if (count%divider) == divider*0: #box
        #print("boom" + str((count/15)%2) + " bpm: " + str(bpm))
        for i in range(le[2]):
            led_strip.set_rgb(i, 0, 0, 255)
        for i in range(ls[9],le[10]):
            led_strip.set_rgb(i, 0, 0, 255)
            
        for i in range(ls[3]-7,(ls[3]+7)):
            led_strip.set_rgb(i, 0, 0, 255)
            foo = i 
            for i in range(7):
                led_strip.set_rgb((foo+(lampSize*i)), 0, 0, 255)
       
    if (count%divider) == divider*0.2: 
       # print("clap" + str((count/15)%2) + " bpm: " + str(bpm))
        for i in range(numLeds):
            led_strip.set_rgb(i, 0, 0, 0)

    if (count%divider) == divider*0.5: #cross
       # print("boom" + str((count/15)%2) + " bpm: " + str(bpm))
        for i in range(ls[5],le[6]):
            led_strip.set_rgb(i, 0, 0, 255)

    if (count%divider) == divider*0.7: 
       # print("clap" + str((count/15)%2) + " bpm: " + str(bpm))
        for i in range(numLeds):
            led_strip.set_rgb(i, 0, 0, 0)

def rainbow(): 
    global offset
    #print(count)
    offset += 30 / 2000.0
    s = 0.7
    v = min((count/50),1)
    for i in range(le[1],0,-1):
        hue = (float(i) / numLeds)*15
        #this code is right for the frontside
        led_strip.set_hsv(i, hue + offset, s, v)
        foo = [i+ls[3], i+ls[5], i+ls[7], i+ls[9]]
        led_strip.set_hsv(foo[0], hue + offset, s, v)
        led_strip.set_hsv(foo[1], hue + offset, s, v)
        led_strip.set_hsv(foo[2], hue + offset, s, v)
        led_strip.set_hsv(foo[3], hue + offset, s, v)
        #this code is right for the back       
        foo2 = [(le[2]-i), (le[4]-i), (le[6]-i), (le[8]-i),(le[10]-i)]
        led_strip.set_hsv(foo2[0], hue + offset, s, v)
        led_strip.set_hsv(foo2[1], hue + offset, s, v)
        led_strip.set_hsv(foo2[2], hue + offset, s, v)
        led_strip.set_hsv(foo2[3], hue + offset, s, v)
        led_strip.set_hsv(foo2[4], hue + offset, s, v)


def rainbowdynamic():
    global offset
    offset += 90 / 2000.0
    tablee = []
    for i in range(4,numLeds):
        if math.floor(random.uniform(0,50)) == 0:
            tablee.insert(i, 1)
            tablee.insert(i-1, 1)
            tablee.insert(i-2, 1)
            tablee.insert(i-3, 1)
        else:
            tablee.insert(i, 0)
    for i in range(numLeds):
        if tablee[i] == 0:
            hue = (float(i) / numLeds)*9
            led_strip.set_hsv(i, hue + offset, 1, 0.5)
        else:
            hue = (float(i) / numLeds)*9  
            led_strip.set_hsv(i, hue + offset, 0.8, 1)
            
def rainbowstrobe():
    global offset
    offset += 90 / 2000.0
    brightness = 255
    changer = count%2
    bpm = 100
   # print(changer)
    if changer == 0:
        
        for i in range(0,numLeds):
            led_strip.set_rgb(i, 0, 0, 0)

    elif changer == 1:
        for i in range(numLeds):
            hue = (float(i) / numLeds)*9  
            led_strip.set_hsv(i, hue + offset, 1, 1)

def throb():
    global count
    count = round(count+6)
    #print(" ")
    #print("step:" + str(count))
    g = 0
    b = 0
    for i in range(min(count, lampSize/2)):

        delay = 100 #time to full brightness. Higher is slower. Default 50. 
        calc = int(255*(max((count-i)/delay, 0)))
        limit  = min(255, calc)
        start = (int(lampSize*4.5))
        led_strip.set_rgb(start+i, limit, g, b)
        led_strip.set_rgb(start+lampSize+i, limit, g, b)
        led_strip.set_rgb(start-i, limit, g, b)
        led_strip.set_rgb(start+lampSize-i, limit, g, b)
        
        delay = 150 #time to full brightness. Higher is slower. Default 50. 
        calc = int(255*(max((count-(i*1.5))/delay, 0)))
        limit = min(255, calc)
        start = (int(lampSize*2.5))
        led_strip.set_rgb(start+i, limit, g, b)
        led_strip.set_rgb(start+lampSize+i, limit, g, b)
        led_strip.set_rgb(start-i, limit, g, b)
        led_strip.set_rgb(start+lampSize-i, limit, g, b)
        start = (int(lampSize*6.5))
        led_strip.set_rgb(start+i, limit, g, b)
        led_strip.set_rgb(start+lampSize+i, limit, g, b)
        led_strip.set_rgb(start-i, limit, g, b)
        led_strip.set_rgb(start+lampSize-i, limit, g, b)        
        
        delay = 200 #time to full brightness. Higher is slower. Default 50. 
        calc = int(255*(max((count-(i*2))/delay, 0)))
        limit = min(255, calc)
        start = (int(lampSize*0.5))
        led_strip.set_rgb(start+i, limit, g, b)
        led_strip.set_rgb(start+lampSize+i, limit, g, b)
        led_strip.set_rgb(start-i, limit, g, b)
        led_strip.set_rgb(start+lampSize-i, limit, g, b)
        start = (int(lampSize*8.5))
        led_strip.set_rgb(start+i, limit, g, b)
        led_strip.set_rgb(start+lampSize+i, limit, g, b)
        led_strip.set_rgb(start-i, limit, g, b)
        led_strip.set_rgb(start+lampSize-i, limit, g, b)

def redpoles():
    global count
    brightness = 255
    changer = count%5
    #print(changer)
    if changer == 0: #turn off
        for i in range(le[4]):
            led_strip.set_rgb(i, 0, 0, 0)
        for i in range(ls[5],le[6]):
            led_strip.set_rgb(i, 255, 0, 0)
        for i in range(ls[7],le[10]):
            led_strip.set_rgb(i, 0, 0, 0)
    elif changer == 1: 
        for i in range(ls[1],le[2]):
            led_strip.set_rgb(i, 0, 0, 0)
        for i in range(ls[3],le[4]):
            led_strip.set_rgb(i, 255, 0, 0)
        for i in range(ls[5],le[numLamps]):
            led_strip.set_rgb(i, 0, 0, 0)
            
    elif changer == 2:
        for i in range(le[6]):
            led_strip.set_rgb(i, 0, 0, 0)
        for i in range(ls[7],le[8]):
            led_strip.set_rgb(i, 255, 0, 0)
        for i in range(ls[9],le[numLamps]):
            led_strip.set_rgb(i, 0, 0, 0)
 
    elif changer == 3:
        for i in range(le[2]):
            led_strip.set_rgb(i, 255, 0, 0)
        for i in range(ls[3],le[10]):
            led_strip.set_rgb(i, 0, 0, 0)

    elif changer == 4: 
        for i in range(le[8]):
            led_strip.set_rgb(i, 0, 0, 0)
        for i in range(ls[9],le[numLamps]):
            led_strip.set_rgb(i, 255, 0, 0)

    
def redstrobe():
    global count
    brightness = 255
    changer = count%4
    bpm = 100
    #print(changer)
    if changer == 0: #turn off
        for i in range(numLeds):
            led_strip.set_rgb(i, 0, 0, 0)

    elif changer == 1: #bottom half
        for i in range(numLamps):
            for n in range(lampSize/2):
                led_strip.set_rgb(n+(lampSize*i), 255, 0, 0)
                
    elif changer == 2: #turn off
        for i in range(numLeds):
            led_strip.set_rgb(i, 0, 0, 0)

    elif changer == 3: #bottom half
        for i in range(numLamps):
            for n in range(lampSize/2, lampSize):
                led_strip.set_rgb(int(n+(lampSize*i)), 255, 0, 0)
    








slider = []
length = 5 #small number, longer tail. This is the amount subtracted from the brightness of each led behind the first one each count. 
for i in range(lampSize):
    slider.insert(i, 0)

def greensliders():
    global count
    for i in range(len(slider)):
        difference = abs((count)-i)*length
        slider[i] = 255-difference
        foo = i
        for i in range(0,numLamps,2):
            brightness = slider[foo]
            half = max(0,math.ceil((slider[foo])/2))
            led_strip.set_rgb((lampSize-foo)+((lampSize*i)), half, slider[foo], half)
        for i in range(1,numLamps,2):
            led_strip.set_rgb((foo)+((lampSize*i)), half, slider[foo], half)


effects = [stop,box,cross,x,rainbow,rainbowdynamic,rainbowstrobe,throb,redpoles,redstrobe,bluesine,whitestrobe,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,]

#effects =
#[
#stop,
#RainbowBounce, RainbowThrob, RainbowStrobe,
#redGlow, RedStrobe, redThrob,
#greenEq,greenWave,greenStrobe,

#stop,
#whiteFlash, whiteUp,stereoStrobe,
#policeSpin,policeSpinFlash,policeSpinStrobe,
#tunnelVision,tunnelVisionRoof,tunnelStrobe,
#]


def haveprint(buttonpress):
    print("Pressed: " + str(buttonpress) )
    print("Bank: " + str(bank) )
    print("BPM: " + str(bpm) )
    print("Effect: " + str(effect) )
    print("Playing effect: " + str(effectplaying))
    print("Effect Name: " + str(effects[effectplaying]))
    print(" ")

def pincheck():
    global held
    global buttonpress
    global bank
    global effect
    global effectplaying
    global bpm
    global count
    if buttonpress != 0:
        if (ioe.input(buttonpress)) != 0:#button i is up
            held = False
    for i in range(1,15):
        if (ioe.input(i)) == 0: #button i is down
            if (buttonpress != i): #this is a new button being pressed. 
                buttonpress = i
                
                if buttonpress <= 4: 
                    bank = buttonpress-1
                    if buttonpress ==4: 
                        bpm = 120
                    haveprint(buttonpress)
                    break
                
                elif buttonpress == 5: 
                    effect = 0
                    effectplaying = 0
                    for i in range(numLeds):
                        led_strip.set_rgb(i, 0, 0, 0)
                    haveprint(buttonpress)
                    break
                
                elif buttonpress >= 6:
                    held = True
                    print("pressed")
                    if bank == 3:
                        bpm = 115 + buttonpress
                    else:
                        for i in range(numLeds):
                            led_strip.set_rgb(i, 0, 0, 0)
                        effect = (buttonpress-5)+(10*bank)
                        effectplaying = effect
                        count = 0 
                    haveprint(buttonpress)
                    break  
            elif buttonpress >= 6 and not held:
                held = True
                print("reset")
                stop()
                count = 0 
while True:
    count += 1
    pincheck()
    if effectplaying >=0:
        effects[effectplaying]()
    elif effectplaying < 0:
        led_strip.set_rgb(min(count,numLeds), 50, 150, 50) 
    time.sleep(bpm/60/100) #each

