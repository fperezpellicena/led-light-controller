#This is the Josh version, designed for the full 14 button controller.
import time
import math
import plasma
import random
from plasma import plasma2040
from pimoroni_i2c import PimoroniI2C
from pimoroni import RGBLED, Analog
from breakout_ioexpander import BreakoutIOExpander
sense = Analog(plasma2040.CURRENT_SENSE, plasma2040.ADC_GAIN, plasma2040.SHUNT_RESISTOR)

offset = 1
lampSize = 72 # The power supplys are 6 amps. one lamp at full power consumes 8.04 amps.
numLeds = lampSize*10
buttonpress = 0
bank = 0
effect = 4
bpm = 120
effectplaying= 4
count= 0 
framerate = 2 #2 is a good default

ls = [0,0,0,0,0,0,0,0,0,0,0,0]
le = [0,0,0,0,0,0,0,0,0,0,0,0]

for i in range(1,11):
    ls[i]  = lampSize*(i-1)
    le[i]  = (lampSize*i)-1 
    print("i value: " + str(i))
    print(ls[i])
    print(le[i])
    print(" ")
    
led_strip = plasma.WS2812(numLeds, 0, 0, plasma2040.DAT)
# Start updating the LED strip
led_strip.start()

led = RGBLED(plasma2040.LED_R, plasma2040.LED_G, plasma2040.LED_B)

# I2C config
PINS_PICO_EXPLORER = {"sda": 20, "scl": 21}
i2c = PimoroniI2C(**PINS_PICO_EXPLORER)
ioe = BreakoutIOExpander(i2c, address=0x18)
for i in range(14):
    ioe.set_mode(i+1, BreakoutIOExpander.PIN_IN_PU)



def nil():
    print("josh you ran nil. This is BAD")

    
def stop():
    print("josh you ran stop. This is fine")
    for i in range(numLeds):
        led_strip.set_rgb(i, 0, 0, 0) 

                    
def stereostrobe():
    brightness = 255
    changer = count%4
    print(changer)
    if changer%2 == 0:
        
        for i in range(0,numLeds):
            led_strip.set_rgb(i, 0, 0, 0)

    elif changer == 1:
        for i in range(0,numLeds,2):
            led_strip.set_rgb(i, brightness, brightness, brightness)
            
    elif changer == 3:
        for i in range(1,numLeds,2):
            led_strip.set_rgb(i, brightness, brightness, brightness)

def rainbow():
    global offset
    offset += 30 / 2000.0
    print(count)
    for i in range(numLeds):
        hue = (float(i) / numLeds)*10
        led_strip.set_hsv(i, hue + offset, 1, 1)


def rainbowstrobe():
    global offset
    offset += 90 / 2000.0
    tablee = []
    for i in range(4,numLeds):
        if math.floor(random.uniform(0,50)) == 0:
            tablee.insert(i, 1)
            tablee.insert(i-1, 1)
            tablee.insert(i-2, 1)
            tablee.insert(i-3, 1)
        else:
            tablee.insert(i, 0)
    for i in range(numLeds):
        if tablee[i] == 0:
            hue = (float(i) / numLeds)*9
            led_strip.set_hsv(i, hue + offset, 1, 0.5)
        else:
            hue = (float(i) / numLeds)*9  
            led_strip.set_hsv(i, hue + offset, 1, 1)



effects = [stop,nil,nil,stereostrobe,rainbow,nil,rainbowstrobe,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,]

#effects =
#[
#stop,
#RainbowBounce, RainbowThrob, RainbowStrobe,
#redGlow, RedStrobe, redThrob,
#greenEq,greenWave,greenStrobe,

#stop,
#whiteFlash, whiteUp,stereoStrobe,
#policeSpin,policeSpinFlash,policeSpinStrobe,
#tunnelVision,tunnelVisionRoof,tunnelStrobe,
#]


def haveprint(buttonpress):
    print("Pressed: " + str(buttonpress) )
    print("Bank: " + str(bank) )
    print("BPM: " + str(bpm) )
    print("Effect: " + str(effect) )
    print("Playing effect: " + str(effectplaying))
    print("Effect Name: " + str(effects[effectplaying]))
    print(" ")

def pincheck(): 
    global buttonpress
    global bank
    global effect
    global effectplaying
    global bpm
    global count
    for i in range(1,15):
        if (ioe.input(i)) == 0: #button i is down 
            if (buttonpress != i): #this is a new button being pressed. 
                buttonpress = i
                
                if buttonpress <= 4: 
                    bank = buttonpress-1
                    if buttonpress ==4: 
                        bpm = 120
                    haveprint(buttonpress)
                    break
                
                elif buttonpress == 5: 
                    effect = 0
                    effectplaying = 0
                    count = 0
                    for i in range(numLeds):
                        led_strip.set_rgb(i, 0, 0, 0)
                    haveprint(buttonpress)
                    break
                
                elif buttonpress >= 6: 
                    if bank == 3:
                        bpm = 115 + buttonpress
                    else:
                        for i in range(numLeds):
                            led_strip.set_rgb(i, 0, 0, 0)
                        effect = (buttonpress-5)+(10*bank)
                        effectplaying = effect
                        count = 0 
                    haveprint(buttonpress)
                    break    

while True:
#     if (count%(30/framerate)) == 0: #this is 30 not 60 because we want to hit each quarter note
#         print("quarter note" + str((count/15)%2) + " bpm: " + str(bpm))
    count += 1
    pincheck()
    if effectplaying !=0:
        effects[effectplaying]()
    time.sleep(framerate/bpm) #if this is (2/bpm), then each beat is 30 frames
#     time.sleep(1) #if this is (2/bpm), then each beat is 30 frames

